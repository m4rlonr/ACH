// An IR LED must be connected to Arduino PWM pin 3.
// On esp pin 4
#include "WiFi.h"
#include "ESPAsyncWebServer.h"
#include <IRremote.h>

// Credenciais para acesso a rede wifi
const char* ssid = "irwin";
const char* password = "irwintrena5m";

AsyncWebServer server(80);
String handler;
String idSense;
String mac;

void command() {
  // const uint8_t NEC_KHZ = 38;
  // const int RAW_DATA_LEN = 211;
  // uint16_t OFF[RAW_DATA_LEN] = {8980,4520, 530,1670, 530,1720, 530,570, 530,570, 530,570, 530,570, 530,1670, 530,1720, 530,1670, 580,1670, 530,1670, 580,1670, 530,1670, 580,520, 580,520, 580,1670, 530,570, 530,570, 530,570, 530,570, 530,570, 530,1670, 530,1720, 530,1670, 530,620, 480,620, 480,620, 480,620, 530,570, 480,570, 530,570, 580,520, 530,570, 530,570, 530,570, 530,570, 580,520, 530,570, 530,1720, 530,570, 530,570, 530,570, 530,570, 530,570, 530,570, 530,570, 530,570, 530,570, 530,570, 530,570, 530,570, 530,570, 530,570, 530,1670, 530,570, 530,570, 530,570, 530,570, 530,570, 530,570, 530,570, 580,520, 530,570, 530,570, 530,570, 530,570, 530,570, 580,520, 530,570, 580,520, 530,570, 580,520, 580,520, 580,520, 530,570, 530,570, 530,570, 530,570, 530,570, 580,520, 530,570, 580,520, 580,520, 530,570, 530,570, 530,570, 530,570, 530,570, 530,1720, 530,570, 530,1670, 530,570, 530,570, 530,570, 530,570, 530,570, 530,1720, 530,1670, 530,1720, 530,570, 530,570, 530,1670, 530,570, 530,1720, 530};
  // uint16_t ON22[RAW_DATA_LEN] = {8930,4420, 580,1620, 580,1620, 580,520, 580,520, 580,520, 580,470, 630,1570, 580,1620, 580,1670, 580,1620, 580,1620, 580,520, 580,1620, 580,1620, 580,1620, 580,520, 580,470, 580,520, 630,470, 580,520, 580,470, 630,1620, 530,1670, 580,1620, 580,470, 630,470, 580,520, 580,520, 580,520, 580,470, 630,470, 630,470, 580,520, 580,520, 580,470, 630,470, 580,520, 580,1620, 580,520, 580,520, 530,520, 630,470, 580,520, 580,520, 580,470, 630,470, 630,470, 580,520, 580,520, 580,470, 630,470, 630,470, 580,520, 580,1620, 580,520, 580,470, 580,520, 580,520, 580,520, 580,470, 580,520, 630,470, 580,520, 580,520, 530,520, 630,470, 580,520, 580,520, 580,520, 580,470, 580,520, 580,520, 580,520, 580,470, 580,520, 630,470, 580,520, 580,1620, 580,520, 580,470, 580,520, 630,470, 580,520, 580,520, 530,520, 630,470, 580,520, 580,520, 580,1620, 580,520, 580,1620, 530,520, 630,470, 580,520, 580,520, 580,520, 580,1620, 580,1620, 580,1620, 580,1620, 580,1620, 580,1620, 580,1620, 580,520, 630};
  // uint16_t ON23[RAW_DATA_LEN] = {8930,4420, 580,1620, 580,1620, 580,520, 580,520, 580,520, 580,470, 580,1620, 580,1620, 580,1670, 580,1620, 580,1620, 580,1620, 580,1620, 580,1620, 580,1620, 580,520, 580,520, 580,470, 580,520, 580,520, 580,520, 580,1620, 580,1620, 580,1620, 580,520, 580,520, 580,470, 580,520, 580,520, 580,520, 580,470, 580,520, 580,520, 580,520, 580,520, 580,470, 580,520, 630,1570, 580,520, 580,520, 580,520, 580,470, 580,520, 580,520, 580,520, 580,520, 530,520, 630,470, 580,520, 580,520, 580,470, 580,520, 580,520, 580,1620, 580,520, 580,520, 580,470, 580,520, 580,520, 580,520, 580,520, 580,470, 580,520, 580,520, 580,520, 580,470, 580,520, 580,520, 580,520, 580,520, 530,520, 580,520, 580,520, 580,520, 580,520, 530,520, 580,520, 580,1620, 580,520, 580,520, 580,520, 530,520, 580,520, 580,520, 580,520, 580,470, 580,520, 580,520, 580,1620, 580,520, 580,1620, 580,520, 580,520, 530,520, 580,520, 580,520, 580,1620, 580,1620, 580,1620, 580,520, 580,520, 580,470, 580,520, 580,1620, 630};
  // uint16_t ON24[RAW_DATA_LEN] = {8930,4420, 580,1620, 580,1620, 580,520, 580,520, 580,520, 580,470, 580,1670, 580,1620, 580,1620, 580,1620, 580,1620, 580,520, 580,470, 580,520, 580,520, 580,1620, 580,520, 580,520, 580,470, 580,520, 580,520, 580,1620, 580,1620, 630,1570, 580,520, 580,520, 580,520, 530,520, 580,520, 580,520, 580,520, 580,520, 580,470, 580,520, 580,520, 580,520, 580,470, 580,1670, 530,520, 580,520, 580,520, 580,520, 580,470, 580,520, 580,520, 580,520, 580,520, 530,520, 580,520, 580,520, 580,520, 580,470, 580,520, 580,1620, 580,520, 580,520, 580,520, 580,470, 580,520, 580,520, 580,520, 580,520, 530,520, 580,520, 580,520, 580,520, 580,520, 530,520, 580,520, 580,520, 580,520, 530,520, 580,520, 580,520, 580,520, 580,520, 530,520, 580,1620, 580,520, 580,520, 580,520, 580,520, 530,520, 580,520, 580,520, 580,520, 530,520, 580,520, 580,1620, 580,520, 580,1620, 580,520, 580,520, 580,520, 530,520, 580,520, 580,1620, 580,1620, 580,1620, 580,1620, 580,520, 580,520, 580,520, 580,1620, 580};
  // uint16_t ON25[RAW_DATA_LEN] = {8930,4420, 580,1620, 580,1620, 580,520, 580,470, 580,520, 580,520, 580,1620, 580,1620, 580,1620, 580,1620, 630,1570, 580,1670, 530,520, 580,520, 580,520, 580,1620, 580,520, 580,520, 530,520, 580,520, 580,520, 580,1620, 580,1620, 580,1620, 580,520, 580,520, 580,520, 530,520, 580,520, 580,520, 580,520, 580,470, 580,520, 580,520, 580,520, 580,520, 530,520, 580,1620, 580,520, 580,520, 580,520, 580,520, 530,520, 580,520, 580,520, 580,520, 580,470, 580,520, 580,520, 580,520, 580,520, 530,520, 580,520, 580,1620, 580,520, 580,520, 580,520, 530,520, 580,520, 580,520, 580,520, 580,470, 580,520, 580,520, 580,520, 580,520, 580,470, 580,520, 580,520, 580,520, 580,520, 530,520, 580,520, 580,520, 580,520, 580,470, 580,520, 580,1620, 580,520, 580,520, 580,520, 580,470, 580,520, 580,520, 580,520, 580,520, 530,520, 580,520, 580,1620, 580,520, 580,1620, 580,520, 580,520, 580,470, 580,520, 580,520, 580,1620, 580,1620, 580,1620, 580,520, 580,1620, 580,520, 580,520, 580,1620, 580};
  // uint16_t ON26[RAW_DATA_LEN] = {8930,4420, 580,1620, 580,1620, 580,520, 580,470, 580,520, 580,520, 580,1620, 580,1620, 630,1570, 630,1570, 630,1570, 630,470, 580,1620, 580,520, 580,520, 580,1620, 580,520, 580,470, 630,470, 580,520, 580,520, 580,1620, 580,1620, 580,1620, 580,520, 580,520, 580,470, 630,470, 630,470, 580,520, 580,520, 580,470, 630,470, 630,470, 580,520, 580,470, 630,470, 630,1570, 630,470, 580,520, 580,520, 580,470, 580,520, 630,470, 580,520, 580,520, 580,470, 580,520, 630,470, 580,520, 580,470, 630,470, 630,470, 580,1620, 580,520, 580,520, 580,470, 630,470, 630,470, 580,520, 580,520, 580,470, 630,470, 630,470, 580,520, 580,520, 580,470, 630,470, 580,520, 580,520, 580,470, 630,470, 580,520, 580,520, 580,520, 580,470, 630,470, 630,1570, 630,470, 580,520, 580,520, 580,470, 580,520, 580,520, 580,520, 580,470, 630,470, 580,520, 580,1620, 580,520, 580,1620, 580,520, 580,520, 530,520, 580,520, 580,520, 580,1620, 580,1620, 580,1620, 580,1620, 580,1620, 580,520, 580,520, 580,1620, 580};
  // switch (opcao) {
  // case 0:
  //   IrSender.sendRaw(OFF, RAW_DATA_LEN, NEC_KHZ);
  //   Serial.println(F("off\n"));
  //   break;
  // case 22:
  //   IrSender.sendRaw(ON22, RAW_DATA_LEN, NEC_KHZ);
  //   Serial.println(F("22\n"));
  //   break;
  // case 23:
  //   IrSender.sendRaw(ON23, RAW_DATA_LEN, NEC_KHZ);
  //   Serial.println(F("23\n"));
  //   break;
  // case 24:
  //   IrSender.sendRaw(ON24, RAW_DATA_LEN, NEC_KHZ);
  //   Serial.println(F("24\n"));
  //   break;
  // case 25:
  //   IrSender.sendRaw(ON25, RAW_DATA_LEN, NEC_KHZ);
  //   Serial.println(F("25\n"));
  //   break;
  // case 26:
  //   IrSender.sendRaw(ON26, RAW_DATA_LEN, NEC_KHZ);
  //   Serial.println(F("26\n"));
  //   break;
  // default:
  // Serial.println(F("Nada\n"));
  //   break;
  // }
}

void setup() {
  pinMode(LED_BUILTIN, OUTPUT);
  Serial.begin(115200);

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi..");
  }

  mac = WiFi.macAddress();
  Serial.println(WiFi.localIP());
  Serial.println(WiFi.macAddress());

  server.on("/check", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", mac.c_str());
  });
  server.on("/emissor", HTTP_POST, [](AsyncWebServerRequest *request) {
    int params = request->params();
    for(int i=0;i<params;i++){
      AsyncWebParameter* p = request->getParam(i);
      idSense = p->name().c_str();
      handler = p->value().c_str();

      // const uint8_t KHZ = 38;
      int number = atoi(idSense.c_str());
      // uint16_t Raw[number] = {strtol(handler.c_str(), NULL, 0)};

      // IrSender.sendRaw(Raw, number, KHZ);

      Serial.println(number);
      request->send_P(200, "text/plain", "Sucesso");
    }
  });

  DefaultHeaders::Instance().addHeader("Access-Control-Allow-Origin", "*");
  server.begin();
}

void loop() {}